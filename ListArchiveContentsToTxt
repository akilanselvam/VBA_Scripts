import java.io.*;
import java.util.jar.*;
import java.util.zip.*;
import java.util.Enumeration;

public class ListArchiveContentsToTxt {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: java ListArchiveContentsToTxt <source_path> <destination_path>");
            System.exit(1);
        }

        String sourcePath = args[0];
        String destinationPath = args[1];

        File sourceDir = new File(sourcePath);
        File destinationDir = new File(destinationPath);

        if (!sourceDir.isDirectory() || !destinationDir.isDirectory()) {
            System.err.println("Both source and destination paths should be directories.");
            System.exit(1);
        }

        File[] archiveFiles = sourceDir.listFiles((dir, name) ->
                name.endsWith(".jar") || name.endsWith(".zip"));

        if (archiveFiles == null || archiveFiles.length == 0) {
            System.err.println("No JAR or ZIP files found in the source directory.");
            System.exit(1);
        }

        try {
            for (File archiveFile : archiveFiles) {
                listArchiveContents(archiveFile, destinationDir);
            }

            System.out.println("Listing complete.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void listArchiveContents(File archiveFile, File destinationDir) throws IOException {
        String archiveFileName = archiveFile.getName();
        String txtFileName = archiveFileName.substring(0, archiveFileName.lastIndexOf('.')) + ".txt";
        File txtFile = new File(destinationDir, txtFileName);

        try (InputStream inputStream = new FileInputStream(archiveFile);
             OutputStream outputStream = new FileOutputStream(txtFile)) {

            if (archiveFileName.endsWith(".jar")) {
                try (JarInputStream jarInputStream = new JarInputStream(inputStream);
                     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream))) {

                    JarEntry entry;
                    while ((entry = jarInputStream.getNextJarEntry()) != null) {
                        String entryPath = entry.getName();
                        writer.write(entryPath);
                        writer.newLine();

                        if (entryPath.endsWith(".jar") || entryPath.endsWith(".zip")) {
                            // Nested JAR or ZIP file found, list its contents recursively
                            writer.write("Nested Archive: " + entryPath);
                            writer.newLine();
                            File nestedArchiveFile = new File(destinationDir, entryPath);
                            try (OutputStream nestedOutputStream = new FileOutputStream(nestedArchiveFile)) {
                                byte[] buffer = new byte[1024];
                                int bytesRead;
                                while ((bytesRead = jarInputStream.read(buffer)) != -1) {
                                    nestedOutputStream.write(buffer, 0, bytesRead);
                                }
                            }
                            listArchiveContents(nestedArchiveFile, destinationDir);
                        }
                    }
                }
            } else if (archiveFileName.endsWith(".zip")) {
                try (ZipInputStream zipInputStream = new ZipInputStream(inputStream);
                     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream))) {

                    ZipEntry entry;
                    while ((entry = zipInputStream.getNextEntry()) != null) {
                        String entryPath = entry.getName();
                        writer.write(entryPath);
                        writer.newLine();

                        if (entryPath.endsWith(".jar") || entryPath.endsWith(".zip")) {
                            // Nested JAR or ZIP file found, list its contents recursively
                            writer.write("Nested Archive: " + entryPath);
                            writer.newLine();
                            File nestedArchiveFile = new File(destinationDir, entryPath);
                            try (OutputStream nestedOutputStream = new FileOutputStream(nestedArchiveFile)) {
                                byte[] buffer = new byte[1024];
                                int bytesRead;
                                while ((bytesRead = zipInputStream.read(buffer)) != -1) {
                                    nestedOutputStream.write(buffer, 0, bytesRead);
                                }
                            }
                            listArchiveContents(nestedArchiveFile, destinationDir);
                        }
                    }
                }
            }
        }
    }
}
