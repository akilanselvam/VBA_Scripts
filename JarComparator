import java.io.File;
import java.io.FileOutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class JarComparator {

    public static void main(String[] args) {
        String leftJarPath = "path/to/left.jar";
        String rightJarPath = "path/to/right.jar";
        String excelFilePath = "comparison_report.xlsx";

        try {
            Map<String, String> comparisonResult = compareJars(leftJarPath, rightJarPath);

            // Create Excel report
            createExcelReport(excelFilePath, comparisonResult);

            System.out.println("Comparison completed. Excel report generated.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<String, String> compareJars(String leftJarPath, String rightJarPath) throws Exception {
        Map<String, String> comparisonResult = new HashMap<>();

        try (ZipFile leftJar = new ZipFile(leftJarPath);
             ZipFile rightJar = new ZipFile(rightJarPath)) {

            Enumeration<? extends ZipEntry> leftEntries = leftJar.entries();

            while (leftEntries.hasMoreElements()) {
                ZipEntry leftEntry = leftEntries.nextElement();

                String leftContent = getContent(leftJar, leftEntry);
                String rightContent = getContent(rightJar, leftEntry);

                if (!leftContent.equals(rightContent)) {
                    comparisonResult.put(leftEntry.getName(), "Content differs");
                }
            }

            Enumeration<? extends ZipEntry> rightEntries = rightJar.entries();

            while (rightEntries.hasMoreElements()) {
                ZipEntry rightEntry = rightEntries.nextElement();

                if (!leftJar.getEntry(rightEntry.getName()).equals(rightEntry)) {
                    comparisonResult.put(rightEntry.getName(), "Missing in left JAR");
                }
            }
        }

        return comparisonResult;
    }

    private static String getContent(ZipFile jarFile, ZipEntry entry) throws Exception {
        StringBuilder content = new StringBuilder();

        try (java.util.Scanner scanner = new java.util.Scanner(jarFile.getInputStream(entry))) {
            while (scanner.hasNextLine()) {
                content.append(scanner.nextLine());
            }
        }

        return content.toString();
    }

    private static void createExcelReport(String excelFilePath, Map<String, String> comparisonResult) throws Exception {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Comparison Report");

        int rowNumber = 0;

        for (Map.Entry<String, String> entry : comparisonResult.entrySet()) {
            Row row = sheet.createRow(rowNumber++);
            Cell fileNameCell = row.createCell(0);
            Cell differenceCell = row.createCell(1);

            fileNameCell.setCellValue(entry.getKey());
            differenceCell.setCellValue(entry.getValue());
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }
}
