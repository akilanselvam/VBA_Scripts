import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.HashMap;
import java.util.Map;

public class MergeDirectories {
    public static void main(String[] args) throws IOException {
        String repo1Path = "path/to/repo1";
        String repo2Path = "path/to/repo2";
        String repo3Path = "path/to/repo3";

        // Ensure that the destination directory (repo3) exists
        File repo3Dir = new File(repo3Path);
        if (!repo3Dir.exists()) {
            repo3Dir.mkdirs();
        }

        // Create a map to store file mappings from repo1 to repo2
        Map<String, String> fileMappings = new HashMap<>();

        // Traverse repo1 and repo2 to build the file mappings
        Files.walkFileTree(Paths.get(repo1Path), new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                String relativePath = repo1Path.substring(file.toString().indexOf(repo1Path) + repo1Path.length());
                String correspondingFilePathInRepo2 = repo2Path + relativePath;

                if (new File(correspondingFilePathInRepo2).exists()) {
                    fileMappings.put(correspondingFilePathInRepo2, file.toString());
                }

                return FileVisitResult.CONTINUE;
            }
        });

        // Copy directory structure from repo2 to repo3 and replace files
        Files.walkFileTree(Paths.get(repo2Path), new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                String relativePath = repo2Path.substring(file.toString().indexOf(repo2Path) + repo2Path.length());
                String correspondingFilePathInRepo3 = repo3Path + relativePath;

                // Ensure the destination directory exists
                new File(correspondingFilePathInRepo3).getParentFile().mkdirs();

                // Copy and replace the file from repo1 if it exists in fileMappings
                if (fileMappings.containsKey(file.toString())) {
                    Files.copy(Paths.get(fileMappings.get(file.toString())), Paths.get(correspondingFilePathInRepo3), StandardCopyOption.REPLACE_EXISTING);
                } else {
                    Files.copy(file, Paths.get(correspondingFilePathInRepo3), StandardCopyOption.REPLACE_EXISTING);
                }

                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                String relativePath = repo2Path.substring(dir.toString().indexOf(repo2Path) + repo2Path.length());
                String correspondingDirPathInRepo3 = repo3Path + relativePath;

                // Ensure the destination directory exists
                new File(correspondingDirPathInRepo3).mkdirs();

                return FileVisitResult.CONTINUE;
            }
        });

        System.out.println("Directory structure merged successfully from repo2, and files from repo1 replaced where applicable.");
    }
}
